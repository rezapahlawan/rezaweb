<#@ template language="C#" HostSpecific="True" #>
<#
var Model = (MvcTextTemplateHost)Host;
var routePrefix = String.Empty;
if (!String.IsNullOrWhiteSpace(Model.AreaName)) {
	routePrefix = "/" + Model.AreaName;
}
routePrefix += "/" + Model.ControllerRootName + "/";
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Objects" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
<# if(MvcTextTemplateHost.NamespaceNeeded(Model.Namespace, Model.ModelType.Namespace)) { #>
using <#= Model.ModelType.Namespace #>;
<# } #>
<# if(Model.ContextType.Namespace != Model.ModelType.Namespace && MvcTextTemplateHost.NamespaceNeeded(Model.Namespace, Model.ContextType.Namespace)) { #>
using <#= Model.ContextType.Namespace #>;
<# } #>

namespace <#= Model.Namespace #>
{
<#
	var modelName = Model.ModelType.Name;
	var entitySetName = Model.EntitySetName;
	var modelVariable = modelName.ToLower();
	var entitySetVariable = entitySetName.ToLower();
	var primaryKey = Model.PrimaryKeys[0];
	var lambdaVar = modelVariable[0];
	var isObjectContext = typeof(ObjectContext).IsAssignableFrom(Model.ContextType);
#>
	public class <#= Model.ControllerName #> : Controller
	{
		private readonly <#= Model.ContextType.Name #> _context;

		public <#= Model.ControllerName #>(<#= Model.ContextType.Name #> context)
		{
			_context = context;
		}

		//
		// GET: <#= routePrefix #>

		public ActionResult Index()
		{
<#  var includeExpressions = "";
	if(isObjectContext) {
		includeExpressions = String.Join("", Model.RelatedProperties.Values.Select(property => String.Format(".Include(\"{0}\")", property.PropertyName)));
	}
	else {
		includeExpressions = String.Join("", Model.RelatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.PropertyName)));
	}
#>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
			var <#= entitySetVariable #> = _context.<#= entitySetName #><#= includeExpressions #>;
			return View(<#= entitySetVariable #>.ToList());
<# } else { #>
			return View(_context.<#= entitySetName #><#= includeExpressions #>.ToList());
<# } #>
		}

		//
		// GET: <#= routePrefix #>Details/5

		public ActionResult Details(<#= primaryKey.ShortTypeName #> id = <#= primaryKey.DefaultValue #>)
		{
<# if(isObjectContext) { #>
			<#= modelName #> <#= modelVariable #> = _context.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
<# } else { #>
			<#= modelName #> <#= modelVariable #> = _context.<#= entitySetName #>.Find(id);
<# } #>
			if (<#= modelVariable #> == null)
			{
				return HttpNotFound();
			}
			return View(<#= modelVariable #>);
		}

		//
		// GET: <#= routePrefix #>Create

		public ActionResult Create()
		{
<# foreach (var property in Model.RelatedProperties.Values) { #>
			ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(_context.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>");
<# } #>
			return View();
		}

		//
		// POST: <#= routePrefix #>Create

		[HttpPost]
		[ValidateAntiForgeryToken]
		public ActionResult Create(<#= modelName #> <#= modelVariable #>)
		{
			try
			{
				if (ModelState.IsValid)
				{
<# if(primaryKey.Type == typeof(Guid)) { #>
					<#= modelVariable #>.<#= primaryKey.Name #> = Guid.NewGuid();
<# } #>
<# if(isObjectContext) { #>
					_context.<#= entitySetName #>.AddObject(<#= modelVariable #>);
<# } else { #>
					_context.<#= entitySetName #>.Add(<#= modelVariable #>);
<# } #>
					_context.SaveChanges();
					return RedirectToAction("Index");
				}
			}
			catch (DataException ex)
			{
				string msg = ex + "\r\n"
							 + "Unable to save changes. Try again, and if the problem persists see your system administrator.";

				//Log the error (add a variable name after DataException)
				ModelState.AddModelError("", msg);
			}
			catch (Exception ex)
			{
				ViewBag.ErrorMessage = ex.Message;
			}

<# foreach (var property in Model.RelatedProperties.Values) { #>
			ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(_context.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>", <#= modelVariable #>.<#= property.ForeignKeyPropertyName #>);
<# } #>
			return View(<#= modelVariable #>);
		}

		//
		// GET: <#= routePrefix #>Edit/5

		public ActionResult Edit(<#= primaryKey.ShortTypeName #> id = <#= primaryKey.DefaultValue #>)
		{
<# if(isObjectContext) { #>
			<#= modelName #> <#= modelVariable #> = _context.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
<# } else { #>
			<#= modelName #> <#= modelVariable #> = _context.<#= entitySetName #>.Find(id);
<# } #>
			if (<#= modelVariable #> == null)
			{
				return HttpNotFound();
			}
<# foreach (var property in Model.RelatedProperties.Values) { #>
			ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(_context.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>", <#= modelVariable #>.<#= property.ForeignKeyPropertyName #>);
<# } #>
			return View(<#= modelVariable #>);
		}

		//
		// POST: <#= routePrefix #>Edit/5

		[HttpPost]
		[ValidateAntiForgeryToken]
		public ActionResult Edit(<#= modelName #> <#= modelVariable #>)
		{
			try
			{
				if (ModelState.IsValid)
				{
<# if(isObjectContext) { #>
					_context.<#= entitySetName #>.Attach(<#= modelVariable #>);
					_context.ObjectStateManager.ChangeObjectState(<#= modelVariable #>, EntityState.Modified);
<# } else { #>
					_context.Entry(<#= modelVariable #>).State = EntityState.Modified;
<# } #>
					_context.SaveChanges();
					return RedirectToAction("Index");
				}
			}
			catch (DataException ex)
			{
				string msg = ex + "\r\n"
							 + "Unable to save changes. Try again, and if the problem persists see your system administrator.";

				//Log the error (add a variable name after DataException)
				ModelState.AddModelError("", msg);
			}
			catch (Exception ex)
			{
				ViewBag.ErrorMessage = ex.Message;
			}
<# foreach (var property in Model.RelatedProperties.Values) { #>
			ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(_context.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>", <#= modelVariable #>.<#= property.ForeignKeyPropertyName #>);
<# } #>
			return View(<#= modelVariable #>);
		}

		//
		// GET: <#= routePrefix #>Delete/5

		public ActionResult Delete(bool? saveChangesError, string errorMessage, <#= primaryKey.ShortTypeName #> id = <#= primaryKey.DefaultValue #>)
		{
			if (saveChangesError.GetValueOrDefault())
			{
				string msg = errorMessage + "<br/>"
							 + "Unable to save changes. Try again, and if the problem persists see your system administrator.";
				ViewBag.ErrorMessage = 	MvcHtmlString.Create(msg);
			}
<# if(isObjectContext) { #>
			<#= modelName #> <#= modelVariable #> = _context.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
<# } else { #>
			<#= modelName #> <#= modelVariable #> = _context.<#= entitySetName #>.Find(id);
<# } #>
			if (<#= modelVariable #> == null)
			{
				return HttpNotFound();
			}
			return View(<#= modelVariable #>);
		}

		//
		// POST: <#= routePrefix #>Delete/5

		[HttpPost, ActionName("Delete")]
		[ValidateAntiForgeryToken]
		public ActionResult DeleteConfirmed(<#= primaryKey.ShortTypeName #> id)
		{
			try
			{
<# if(isObjectContext) { #>
				<#= modelName #> <#= modelVariable #> = _context.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
				_context.<#= entitySetName #>.DeleteObject(<#= modelVariable #>);
<# } else { #>
				<#= modelName #> <#= modelVariable #> = _context.<#= entitySetName #>.Find(id);
				_context.<#= entitySetName #>.Remove(<#= modelVariable #>);
<# } #>
				_context.SaveChanges();				
			}
			catch (Exception ex)
			{
				//Log the error (add a variable name after DataException)
				return RedirectToAction("Delete",
										new System.Web.Routing.RouteValueDictionary
										{
											{"id", id},
											{"saveChangesError", true},
											{"errorMessage", ex.Message}
										});
			}
			return RedirectToAction("Index");
		}

		protected override void Dispose(bool disposing)
		{
			_context.Dispose();
			base.Dispose(disposing);
		}
	}
}